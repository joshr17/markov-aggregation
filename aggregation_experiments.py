#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 23 14:45:55 2018

@author: joshua
"""
import time
import random

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

import aggregation as agg
import graph as gp


def random_linkage(N):
    """ Generates a random linkage matrix describing a clustering of N nodes.
    """
    linkage = []
    nodes = list(range(N))

    for i in range(N-1):
        node1 = nodes.pop(random.randint(0, len(nodes)-1))
        node2 = nodes.pop(random.randint(0, len(nodes)-1))

        nodes.append(N+i)
        linkage.append([node1, node2])

    return np.array(linkage)


def partition(lst, n):
    """ Returns a random list of n lists that partition lst.
    """
    random.shuffle(lst)
    division = len(lst) / float(n)
    return [lst[int(round(division * i)): int(round(division * (i + 1)))] for i in range(n)]


def random_aggregation(P, T):
    """ Returns the stationary distributions of the Markov process on edges
    induced by (P,T) according to a randomly generated linkage matrix.
    """
    N = P.shape[0]
    test_Z = random_linkage(N)
    stationary = agg.aggregation_pi(P, T, test_Z, True)
    return stationary


def compare_hierarchical_and_random_aggregation():
    """ This function runs a test comparing performance between aggregating a
    hierarchical graph generated by graph.build_hierarcical_graph according to
    its hierarchy and aggregating in a random fashion.
    """
    dictionary_hierarchy = {}
    dictionary_random = {}

    for n in [5, 6, 7, 8, 9, 10]:
        for m in [5, 6, 7, 8, 9, 10]:
            n_clusters = n
            n_per_cluster = m
            p = 0.8
            n_interconnections = 2*n

            while True:
                try:

                    graph = gp.build_hierarcical_graph(
                        n_clusters, n_per_cluster, p, n_interconnections)
                    gp.add_random_weights(graph)

                    (P, T) = gp.graph_to_matrices(graph)
                    N = P.shape[0]
                    (line_P, line_T) = agg.to_line_graph(P, T)
                    dict_P = agg.to_dictionary(P)
                    Z = gp.build_linkage_for_hierarchical_graph(
                        n_clusters, n_per_cluster).astype(np.uint8)
                    is_binary = False

                    (perm_P, perm_T, order, permutation) = agg.translate_dendrogram(
                        dict_P, line_P, line_T, Z, N, is_binary, n_clusters, n_per_cluster)

                    start_time = time.time()
                    agg.aggregation_pi(P, T, Z, is_binary, n_clusters, n_per_cluster)
                    dictionary_hierarchy[(n, m)] = time.time() - start_time
                    print("--- %s seconds ---" % (time.time() - start_time))

                    break

                except:
                    pass # hierarchy failed due to singularity, try again

            while True:
                try:
                    permutation = agg.random_permutation(N)
                    (P, T) = agg.permute_P_and_T(P, T, permutation)

                    (line_P, line_T) = agg.to_line_graph(P, T)
                    dict_P = agg.to_dictionary(P)
                    Z = gp.build_linkage_for_hierarchical_graph(
                        n_clusters, n_per_cluster).astype(np.uint8)

                    start_time = time.time()
                    agg.aggregation_pi(
                        P, T, Z, is_binary, n_clusters, n_per_cluster)
                    dictionary_random[(n, m)] = time.time() - start_time
                    print("--- %s seconds ---" % (time.time() - start_time))

                    break

                except:
                    pass # hierarchy failed due to singularity, try again

    return(dictionary_hierarchy, dictionary_random)

def plot_ratio_of_hierarchy_to_random():
    """ Plots a 2D bar chart of the ratio hierarchy/random of the computation
    time for aggrgation according the the graphs hierarchy versus random
    aggregation.
    """
    # setup the figure and axes
    fig = plt.figure(figsize=(6, 4))
    ax1 = fig.add_subplot(111, projection='3d')

    #unravel 2D datapoints
    _x = np.array([5, 6, 7, 8, 9, 10])
    _y = np.array([5, 6, 7, 8, 9, 10])
    _xx, _yy = np.meshgrid(_x, _y)
    x, y = _xx.ravel(), _yy.ravel()


    """
    #The following two dictionaries are an example of the output of the function above.
    #order is (n_clusters, n_per_cluster)
    dictionary_hierarchy = {(5, 5): 1.9242868423461914,
                          (5, 6): 3.0387330055236816,
                          (5, 7): 4.294842958450317,
                          (5, 8): 6.857447862625122,
                          (5, 9): 8.640533924102783,
                          (5, 10): 14.9342782497406,
                          (6, 5): 3.529215097427368,
                          (6, 6): 5.921259164810181,
                          (6, 7): 8.33638620376587,
                          (6, 8): 13.075989961624146,
                          (6, 9): 18.49626398086548,
                          (6, 10): 26.881853103637695,
                          (7, 5): 6.005958795547485,
                          (7, 6): 9.677239179611206,
                          (7, 7): 15.277256965637207,
                          (7, 8): 23.815866708755493,
                          (7, 9): 43.135333776474,
                          (7, 10): 68.03468680381775,
                          (8, 5): 11.362504959106445,
                          (8, 6): 17.044795036315918,
                          (8, 7): 26.199939012527466,
                          (8, 8): 47.85016870498657,
                          (8, 9): 91.31153678894043,
                          (8, 10): 125.97350692749023,
                          (9, 5): 16.91524600982666,
                          (9, 6): 28.494030714035034,
                          (9, 7): 45.88277769088745,
                          (9, 8): 82.60144424438477,
                          (9, 9): 148.10572004318237,
                          (9, 10): 226.49727392196655,
                          (10, 5): 26.305293083190918,
                          (10, 6): 48.9888060092926,
                          (10, 7): 97.96195483207703,
                          (10, 8): 148.77071475982666,
                          (10, 9): 279.3027877807617,
                          (10, 10): 428.7370538711548}

    dictionary_random = {(5, 5): 2.023488998413086,
                         (5, 6): 3.1124212741851807,
                         (5, 7): 4.967828989028931,
                         (5, 8): 7.514068841934204,
                         (5, 9): 14.733015060424805,
                         (5, 10): 14.43279218673706,
                         (6, 5): 3.8259570598602295,
                         (6, 6): 6.197994947433472,
                         (6, 7): 9.154906034469604,
                         (6, 8): 13.912408113479614,
                         (6, 9): 20.63709020614624,
                         (6, 10): 29.758535861968994,
                         (7, 5): 6.343202114105225,
                         (7, 6): 10.368288040161133,
                         (7, 7): 16.27698040008545,
                         (7, 8): 25.634505033493042,
                         (7, 9): 45.34427094459534,
                         (7, 10): 70.69704389572144,
                         (8, 5): 10.065577983856201,
                         (8, 6): 17.016184091567993,
                         (8, 7): 32.693891286849976,
                         (8, 8): 54.83263301849365,
                         (8, 9): 89.94290804862976,
                         (8, 10): 136.73730182647705,
                         (9, 5): 16.747224807739258,
                         (9, 6): 33.572537899017334,
                         (9, 7): 44.393831968307495,
                         (9, 8): 91.22346615791321,
                         (9, 9): 143.52761697769165,
                         (9, 10): 244.66413521766663,
                         (10, 5): 29.568551301956177,
                         (10, 6): 50.09815716743469,
                         (10, 7): 87.27888989448547,
                         (10, 8): 173.24417090415955,
                         (10, 9): 290.7371361255646,
                         (10, 10): 432.04650378227234}
    """

    (dictionary_hierarchy, dictionary_random) = compare_hierarchical_and_random_aggregation()

    dictionary_ratio = {}

    for key in dictionary_hierarchy:
        dictionary_ratio[key] = dictionary_hierarchy[key]/dictionary_random[key]

    length = len(dictionary_random.keys())

    top = np.zeros((length,))

    k = 0
    for key in dictionary_hierarchy.keys():
        top[k] = dictionary_ratio[key]
        k = k+1

    bottom = np.zeros_like(top)
    width = depth = 1

    ax1.bar3d(x, y, bottom, width, depth, top)
    ax1.set_title('Ratio')
    ax1.set_xlabel('number per cluster')
    ax1.set_ylabel('number of clusters')
    #fig.savefig('hierarchy_random_ratio_aggregation.jpg')
    plt.show()


if __name__ == "__main__":

    print("Running aggregation experiments")
    plot_ratio_of_hierarchy_to_random()
